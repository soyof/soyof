(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{555:function(s,a,e){"use strict";e.r(a);var n=e(1),t=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"js常用数据方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js常用数据方法"}},[s._v("#")]),s._v(" JS常用数据方法")]),s._v(" "),a("h2",{attrs:{id:"string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[s._v("#")]),s._v(" String")]),s._v(" "),a("ul",[a("li",[a("p",[a("code",[s._v(".length")]),s._v("       字符串的长度")])]),s._v(" "),a("li",[a("p",[a("code",[s._v(".charAt(索引)")]),s._v("  返回值是指定索引位置的字符串，超出索引，结果为空字符串")])]),s._v(" "),a("li",[a("p",[a("code",[s._v(".fromCharCode(数字值，数字值...)")]),s._v(" 返回的是ASCII码对应的值")])]),s._v(" "),a("li",[a("p",[a("code",[s._v(".concat(字符串1，字符串2，...)")]),s._v(" 将括号里面的字符串加在原来的字符串后面，返回一个新的字符串")])]),s._v(" "),a("li",[a("p",[a("code",[s._v(".indexOf(要找的字符串，从某个位置开始的索引)")]),s._v(" 返回的是这个字符串的索引值，没有找到则返回-1；返回的为数字类型的")])]),s._v(" "),a("li",[a("p",[a("code",[s._v(".lastIndexOf(要找的字符串)")]),s._v(" 从后向前找，但是索引仍然是从左向右的方式，找不到则返回-1")])]),s._v(" "),a("li",[a("p",[a("code",[s._v('.replace("原来的字符串","新的字符串")')]),s._v(" 用来替换字符串的")])]),s._v(" "),a("li",[a("p",[a("code",[s._v(".slice(开始的索引,结束的索引)")]),s._v(" 从索引开始的位置开始提取,到索引结束的位置的前一个结束,没有结束位置的索引的值，并返回这个提取后的字符串")])]),s._v(" "),a("li",[a("p",[a("code",[s._v('.split("要干掉的字符串",切割后留下的个数)')]),s._v(" 切割字符串--返回值为数组")])]),s._v(" "),a("li",[a("p",[a("code",[s._v(".substr(开始的位置,个数)")]),s._v(" 返回的是截取后的新的字符串")])]),s._v(" "),a("li",[a("p",[a("code",[s._v(".substring(开始的索引,结束的索引)")]),s._v(" 返回截取后的字符串,不包含结束的索引的字符串")])]),s._v(" "),a("li",[a("p",[a("code",[s._v(".toLocaleLowerCase()")]),s._v(" 转小写")])]),s._v(" "),a("li",[a("p",[a("code",[s._v(".toLowerCase()")]),s._v(" 转小写")])]),s._v(" "),a("li",[a("p",[a("code",[s._v(".toLocaleUpperCase()")]),s._v(" 转大写")])]),s._v(" "),a("li",[a("p",[a("code",[s._v(".toUpperCase()")]),s._v(" 转大写")])]),s._v(" "),a("li",[a("p",[a("code",[s._v(".trim()")]),s._v(" 干掉字符串两端的空格")])]),s._v(" "),a("li",[a("p",[a("code",[s._v(".startsWith(x)")]),s._v(" 以什么开始,判断字符串中是否以x字符开始---返回值为布尔类型")])]),s._v(" "),a("li",[a("p",[a("code",[s._v(".endsWith(x)")]),s._v(" 以什么结束,判断字符串是否以x结束---返回值为布尔类型")])]),s._v(" "),a("li",[a("p",[a("code",[s._v(".padStart()")]),s._v("方法,  ."),a("code",[s._v("padEnd()")]),s._v("方法")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("如果某个字符串不够指定长度，会在头部或尾部补全。"),a("code",[s._v("padStart()")]),s._v("用于头部补全，"),a("code",[s._v("padEnd()")]),s._v("用于尾部补全")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("padStart()")]),s._v("和"),a("code",[s._v("padEnd()")]),s._v("一共接受两个参数，第一个参数用来指定字符串的最小长度，第二个参数是用来补全的字符串")])]),s._v(" "),a("li",[a("p",[s._v("如果原字符串的长度，等于或大于指定的最小长度，则返回原字符串")])]),s._v(" "),a("li",[a("p",[s._v("如果用来补全的字符串与原字符串，两者的长度之和超过了指定的最小长度，则会截去超出位数的补全字符串")])]),s._v(" "),a("li",[a("p",[s._v("如果省略第二个参数，默认使用空格补全长度")])])])])]),s._v(" "),a("h2",{attrs:{id:"date"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#date"}},[s._v("#")]),s._v(" Date")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("var dt=new Date()   console.log(dt.toString())   转换为字符串类型")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("dt.getFullYear()")]),s._v("//年")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("dt.getMonth()")]),s._v("//月---从0开始")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("dt.getDate()")]),s._v("//日")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("dt.getHours()")]),s._v("//小时")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("dt.getMinutes()")]),s._v("//分钟")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("dt.getSeconds()")]),s._v("//秒")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("dt.getDay()")]),s._v("//星期---从0开始")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("dt.toDateString()")]),s._v("//日期    英文格式")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("dt.toLocaleDateString()")]),s._v("//日期")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("dt.toTimeString()")]),s._v("//时间    英文格式")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("dt.toLocaleTimeString()")]),s._v("//时间")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("dt.valueOf()")]),s._v("//毫秒")])])]),s._v(" "),a("h2",{attrs:{id:"math"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#math"}},[s._v("#")]),s._v(" Math")]),s._v(" "),a("ul",[a("li",[a("p",[a("code",[s._v("Math.ceil()")]),s._v("---向上取整")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("Math.floor()")]),s._v("---向下取整")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("Math.PI")]),s._v("----圆周率的值")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("Math.Max()")]),s._v("---一组数字中的最大值")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("Math.Min()")]),s._v("---一组数字中的最小值")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("Math.abs()")]),s._v("----绝对值")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("Math.random()")]),s._v("---随机数字")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("Math.sqrt()")]),s._v("----开平方")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("Math.pow()")]),s._v("----一个数字的多少次幂")])])]),s._v(" "),a("h2",{attrs:{id:"array"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array"}},[s._v("#")]),s._v(" Array")]),s._v(" "),a("ul",[a("li",[a("p",[a("code",[s._v("Array.isArray(对象)")]),s._v("----------判断这个对象是不是数组")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("instanceof")]),s._v("  关键字  ---------判断两个对象是否为同一类型")])]),s._v(" "),a("li",[a("p",[a("code",[s._v(".concat(数组，数组，数组，...)")]),s._v("  组合成一个新的数组")])]),s._v(" "),a("li",[a("p",[a("code",[s._v(".every（函数）")]),s._v("---返回值是布尔类型，函数作为参数使用，函数中有三个参数，第一个参数是元素的值，第二个参数是索引值，第三个参数是原来的数组    如果这个数组中的每个元素的值都符合条件，最后才返回的是true")])]),s._v(" "),a("li",[a("p",[a("code",[s._v(".push(值)")]),s._v(" -----将值追加到数组最后，返回值也是追加数据之后的数组长度")])]),s._v(" "),a("li",[a("p",[a("code",[s._v(".pop()")]),s._v(" ---------删除数组中最后一个元素，返回值就是删除的这个值")])]),s._v(" "),a("li",[a("p",[a("code",[s._v(".shift()")]),s._v(" -------删除数组中第一个元素，返回值就是删除的这个值")])]),s._v(" "),a("li",[a("p",[a("code",[s._v(".unshift(值)")]),s._v(" ----向数组的第一个元素前面插入一个新的元素，----返回值是插入后的数组长度")])]),s._v(" "),a("li",[a("p",[a("code",[s._v(".forEach(函数)")]),s._v(" ---遍历数组用---相当于for循环遍历数组  函数值类似于.every()")])]),s._v(" "),a("li",[a("p",[a("code",[s._v(".indexOf(元素值)")]),s._v("  ----返回的是索引，如果数组中没有这个元素值，则返回-1")])]),s._v(" "),a("li",[a("p",[a("code",[s._v(".lastIndexOf(要找的元素值)")]),s._v("------ 从后向前找，但是索引仍然是从左向右的方式，找不到则返回-1")])]),s._v(" "),a("li",[a("p",[a("code",[s._v('.join("字符串")')]),s._v(" ------将每个元素用新加的字符串隔开   返回的是一个字符串")])]),s._v(" "),a("li",[a("p",[a("code",[s._v(".map(函数)")]),s._v(" ----------数组中的每个元素都要执行这个函数，把执行后的结果组成一个新的数组，返回这个新的数组")])]),s._v(" "),a("li",[a("p",[a("code",[s._v(".reverse()")]),s._v(" ----------反转数组")])]),s._v(" "),a("li",[a("p",[a("code",[s._v(".sort()")]),s._v(" -------------排序，可能不稳定，如果不稳定，将下面的固定代码写入")])])]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[s._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("compare")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("b")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("b")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//a-b从小到大    b-a从大到小")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("ul",[a("li",[a("p",[a("code",[s._v(".slice(开始的索引，结束的索引)")]),s._v(" ---把截取的数组的值放在一个新的数组中，截取的值不包括结束的索引对应的元素值")])]),s._v(" "),a("li",[a("p",[a("code",[s._v(".slice(开始的索引)")]),s._v(" ---从开始的索引开始,到数组结束(包括结束的值)")])]),s._v(" "),a("li",[a("p",[a("code",[s._v(".slice()")]),s._v(" ---全部截取并返回新数组")])]),s._v(" "),a("li",[a("p",[a("code",[s._v(".splice（开始的索引，要删除的个数，替换或者新增的元素值）")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("一般用于删除数组中的元素值，或者替换元素值 ,如果为新增元素值，则增加的位置为开始位置的元素值的前面")])]),s._v(" "),a("li",[a("p",[s._v("返回值:如果从array中删除了元素，返回的是含有被删除的元素的数组。")])])])]),s._v(" "),a("li",[a("p",[a("code",[s._v(".includes(value)")]),s._v(" ---  value表示需要判断的值,前面跟数组,判断value是否在数组中出现---返回值为布尔类型")])]),s._v(" "),a("li",[a("p",[a("code",[s._v(".sort()")]),s._v(" 方法用于对数组的元素进行排序。")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("如果调用该方法时没有使用参数，将按字母顺序对数组中的元素进行排序，说得更精确点，是按照字符编码的顺序进行排序。要实现这一点，首先应把数组的元素都转换成字符串（如有必要），以便进行比较")])]),s._v(" "),a("li",[a("p",[s._v("如果想按照其他标准进行排序，就需要提供比较函数，该函数要比较两个值，然后返回一个用于说明这两个值的相对顺序的数字。比较函数应该具有两个参数 a 和 b，其返回值如下：")]),s._v(" "),a("ul",[a("li",[s._v("若 a 小于 b，在排序后的数组中 a 应该出现在 b 之前，则返回一个小于 0 的值。")]),s._v(" "),a("li",[s._v("若 a 等于 b，则返回 0。")]),s._v(" "),a("li",[s._v("若 a 大于 b，在排序后的数组中 a 应该出现在 b 之后,则返回一个大于 0 的值。")])])])])]),s._v(" "),a("li",[a("p",[a("code",[s._v(".includes(value)")]),s._v(" ---  value表示需要判断的值,前面跟数组,判断value是否在数组中出现---返回值为布尔类型")])]),s._v(" "),a("li",[a("p",[a("code",[s._v(".find()")]),s._v("  方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 "),a("code",[s._v("undefined")]),s._v("   ( ES6提供 )")]),s._v(" "),a("blockquote",[a("p",[s._v("语法:  array.find ( callback, [ thisValue ] )")])]),s._v(" "),a("ul",[a("li",[s._v("当数组中的元素在测试条件( "),a("code",[s._v("callback")]),s._v(" )时返回 "),a("em",[s._v("true")]),s._v(" 时, find() 返回符合条件的元素，之后的值不会再调用执行函数")]),s._v(" "),a("li",[s._v("如果没有符合条件的元素返回 undefined")])]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("参数")]),s._v(" "),a("th",[s._v("描述")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("callback("),a("code",[s._v("item")]),s._v(", "),a("code",[s._v("index")]),s._v(","),a("code",[s._v("arr")]),s._v(")")]),s._v(" "),a("td",[s._v("必需。数组每个元素需要执行的函数。                                                                                                               函数参数:参数描述"),a("code",[s._v("item")]),s._v("必需 => 当前元素                                                                                                                                      "),a("code",[s._v("index")]),s._v("可选 => 当前元素的索引值                                                                                                                                               "),a("code",[s._v("arr")]),s._v("可选 => 当前元素所属的数组对象")])]),s._v(" "),a("tr",[a("td",[a("em",[s._v("thisValue")])]),s._v(" "),a("td",[s._v('可选。 传递给函数的值一般用 "this" 值。 如果这个参数为空， "undefined" 会传递给 "this" 值')])])])])]),s._v(" "),a("li",[a("p",[a("code",[s._v(".findIndex()")]),s._v("方法返回数组中满足提供的测试函数的第一个元素的"),a("strong",[s._v("索引")]),s._v("。否则返回-1。 ( ES6提供 )")]),s._v(" "),a("blockquote",[a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("arr.findIndex(callback, [thisValue] )\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])]),s._v(" "),a("blockquote",[a("p",[s._v("参数说明同"),a("code",[s._v(".find()")]),s._v("类似")])]),s._v(" "),a("ul",[a("li",[s._v("当数组中的元素在测试条件( "),a("code",[s._v("callback")]),s._v(" )时返回 "),a("em",[s._v("true")]),s._v(" 时, find() 返回符合条件的元素对应的 "),a("code",[s._v("索引")]),s._v("，之后的值不会再调用执行函数。")]),s._v(" "),a("li",[s._v("如果没有符合条件的元素返回 "),a("code",[s._v("-1")])])])]),s._v(" "),a("li",[a("p",[a("code",[s._v(".some")]),s._v("(callback, thisValue)")]),s._v(" "),a("p",[s._v("some() 方法用于检测数组中的元素是否满足指定条件（函数提供）。")]),s._v(" "),a("p",[s._v("some() 方法会依次执行数组的每个元素：")]),s._v(" "),a("ul",[a("li",[s._v("如果有一个元素满足条件，则表达式返回"),a("em",[s._v("true")]),s._v(" , 剩余的元素不会再执行检测。")]),s._v(" "),a("li",[s._v("如果没有满足条件的元素，则返回false。")])]),s._v(" "),a("p",[a("strong",[s._v("注意：")]),s._v(" some() 不会对空数组进行检测。")]),s._v(" "),a("p",[a("strong",[s._v("注意：")]),s._v(" some() 不会改变原始数组。")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("参数")]),s._v(" "),a("th",[s._v("描述")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[a("em",[s._v("function(currentValue, index,arr)")])]),s._v(" "),a("td",[s._v("必须。函数，数组中的每个元素都会执行这个函数 函数参数: 参数描述"),a("em",[s._v("currentValue")]),s._v("必须。当前元素的值"),a("em",[s._v("index")]),s._v("可选。当前元素的索引值"),a("em",[s._v("arr")]),s._v("可选。当前元素属于的数组对象")])]),s._v(" "),a("tr",[a("td",[a("em",[s._v("thisValue")])]),s._v(" "),a("td",[s._v('可选。对象作为该执行回调时使用，传递给函数，用作 "this" 的值。 如果省略了 thisValue ，"this" 的值为 "undefined"')])])])])])]),s._v(" "),a("h2",{attrs:{id:"object"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object"}},[s._v("#")]),s._v(" Object")]),s._v(" "),a("ul",[a("li",[a("p",[a("code",[s._v("Object.assign()")]),s._v("  将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("assign")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("sources"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("target")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 目标对象\n"),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("sources")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 源对象\nObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("assign 不会在那些source对象值为 "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[s._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[s._v("`")])]),s._v(" 或 "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[s._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("undefined")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[s._v("`")])]),s._v(" 的时候抛出错误\n继承属性和不可枚举属性不能拷贝\n原始类型会被包装成对象\n异常会打断后续拷贝任务\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("Object.create()")]),s._v("  方法创建一个新对象，使用现有的对象来提供新创建的对象的"),a("code",[s._v("__proto__")]),s._v("  返回值: 新对象")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[s._v("Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("proto"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" propertiesObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nproto\n新创建对象的原型对象。\npropertiesObject\n可选。如果没有指定为 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),s._v("，则是要添加到新创建对象的可枚举属性（即其自身定义的属性，而不是其原型链上的枚举属性）对象的属性描述符以及相应的属性名称。这些属性对应Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("defineProperties")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("的第二个参数。\n\n如果propertiesObject参数是 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" 或非原始包装对象，则抛出一个 TypeError 异常\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("Object.defineProperties()")]),s._v("  直接在一个对象上定义新的属性或修改现有属性,并返回该对象")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[s._v("Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("defineProperties")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" props"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\nobj\n在其上定义或修改属性的对象。\nprops\n要定义其可枚举属性或修改的属性描述符的对象。对象中存在的属性描述符主要有两种：数据描述符和访问器描述符。描述符具有以下键：\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("configurable\n        "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v(" 当且仅当该属性描述符的类型可以被改变并且该属性可以从对应对象中删除。\n        默认为 "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("enumerable\n        "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v(" 当且仅当在枚举相应对象上的属性时该属性显现。\n        默认为 "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("value\n        与属性关联的值。可以是任何有效的JavaScript值（数字，对象，函数等）。\n        默认为 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("writable\n        "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("当且仅当与该属性相关联的值可以用assignment operator改变时。\n        默认为 "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("get\n        作为该属性的 getter 函数，如果没有 getter 则为"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),s._v("。函数返回值将被用作属性的值。\n        默认为 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("set\n        作为属性的 setter 函数，如果没有 setter 则为"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),s._v("。函数将仅接受参数赋值给该属性的新值。\n        默认为 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("Object.defineProperty()")]),s._v(" 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象。")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[s._v("Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("defineProperty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" prop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" descriptor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nobj\n\t要在其上定义属性的对象。\nprop\n\t要定义或修改的属性的名称。\ndescriptor\n\t将被定义或修改的属性描述符。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("Object.entries()")]),s._v("方法返回一个给定对象自身可枚举属性的键值对数组，其排列与使用 "),a("code",[s._v("for...in")]),s._v("循环遍历该对象时返回的顺序一致（区别在于 for-in 循环也枚举原型链中的属性）。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Object.entries(obj)\n\nobj\n可以返回其可枚举属性的键值对的对象。\n返回值\n给定对象自身可枚举属性的键值对数组。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("Object.freeze()")]),s._v(" 方法可以"),a("strong",[s._v("冻结")]),s._v("一个对象。一个被冻结的对象再也不能被修改；冻结了一个对象则不能向这个对象添加新的属性，不能删除已有属性，不能修改该对象已有属性的可枚举性、可配置性、可写性，以及不能修改已有属性的值。此外，冻结一个对象后该对象的原型也不能被修改。"),a("code",[s._v("freeze()")]),s._v(" 返回和传入的参数相同的对象。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Object.freeze(obj)\n\nobj\n要被冻结的对象。\n返回值\n被冻结的对象\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("Object.fromEntries()")]),s._v(" 方法把键值对列表转换为一个对象。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Object.fromEntries(iterable)\n\niterable\n可迭代对象，类似 Array 、 Map 或者其它实现了可迭代协议的对象\n返回值\n一个由该迭代对象条目提供对应属性的新对象\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("Object.getOwnPropertyDescriptor()")]),s._v("  方法返回指定对象上一个自有属性对应的属性描述符。（自有属性指的是直接赋予该对象的属性，不需要从原型链上进行查找的属性）")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Object.getOwnPropertyDescriptor(obj, prop)\n\nobj\n需要查找的目标对象\nprop\n目标对象内属性名称\n返回值\n如果指定的属性存在于对象上，则返回其属性描述符对象（property descriptor），否则返回 undefined\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("Object.getOwnPropertyNames()")]),s._v("方法返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括Symbol值作为名称的属性）组成的数组。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Object.getOwnPropertyNames(obj)\n\nobj\n一个对象，其自身的可枚举和不可枚举属性的名称被返回\n返回值\n在给定对象上找到的自身属性对应的字符串数组\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("Object.getOwnPropertySymbols()")]),s._v(" 方法返回一个给定对象自身的所有 Symbol 属性的数组")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Object.getOwnPropertySymbols(obj)\n\nobj\n要返回 Symbol 属性的对象\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("Object.getPrototypeOf()")]),s._v(" 方法返回指定对象的原型")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Object.getPrototypeOf(object)\n\nobj\n要返回其原型的对象\n返回值\n给定对象的原型。如果没有继承属性，则返回 null\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("Object.is()")]),s._v(" 方法判断两个值是否是相同的值")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Object.is(value1, value2)\n\nvalue1\n第一个需要比较的值\nvalue2\n第二个需要比较的值\n返回值\nBoolean\n\nObject.is() 判断两个值是否相同。如果下列任何一项成立，则两个值相同：\n    两个值都是 undefined\n    两个值都是 null\n    两个值都是 true 或者都是 false\n    两个值是由相同个数的字符按照相同的顺序组成的字符串\n    两个值指向同一个对象\n    两个值都是数字并且\n    都是正零 +0\n    都是负零 -0\n    都是 NaN\n    都是除零和 NaN 外的其它同一个数字\n=== 运算符（和== 运算符）将数字值 -0 和 +0 视为相等，并认为 Number.NaN 不等于 NaN\nobject.is()不做隐式转换\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("Object.isExtensible()")]),s._v(" 方法判断一个对象是否是可扩展的（是否可以在它上面添加新的属性）")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Object.isExtensible(obj)\n\nobj\n需要检测的对象\n返回值\nBoolean  密封对象是不可扩展的   冻结对象也是不可扩展\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("Object.isFrozen()")]),s._v("方法判断一个对象是否被冻结")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Object.isFrozen(obj)\n\n一个不可扩展的空对象同时也是一个冻结对象\n一个不可扩展的对象,拥有一个不可写但可配置的属性,则它仍然是非冻结的\n一个不可扩展的对象,拥有一个不可配置但可写的属性,则它仍然是非冻结的\n一个不可扩展的对象,值拥有一个访问器属性,则它仍然是非冻结的\n一个冻结对象也是一个密封对象,更是一个不可扩展的对象\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("Object.isSealed()")]),s._v(" 方法判断一个对象是否被密封")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Object.isSealed(obj)\n\n把一个空对象变的不可扩展,则它同时也会变成个密封对象\n如果这个对象不是空对象,则它不会变成密封对象,因为密封对象的所有自身属性必须是不可配置的\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("Object.keys()")]),s._v(" 方法会返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和使用 "),a("code",[s._v("for...in")]),s._v(" 循环遍历该对象时返回的顺序一致 。如果对象的键-值都不可枚举，那么将返回由键组成的数组")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Object.keys(obj)\n\nobj\n要返回其枚举自身属性的对象\n返回值\n一个表示给定对象的所有可枚举属性的字符串数组\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("Object.preventExtensions()")]),s._v("方法让一个对象变的不可扩展，也就是永远不能再添加新的属性")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Object.preventExtensions(obj)\n\nobj\n将要变得不可扩展的对象\n返回值\n已经不可扩展的对象\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("hasOwnProperty()")]),s._v(" 方法会返回一个布尔值，指示对象"),a("strong",[s._v("自身")]),s._v("属性中是否具有指定的属性（也就是是否有指定的键）")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("obj.hasOwnProperty(prop)\n\nprop\n要检测的属性  字符串 名称或者 Symbol\n返回值\nBoolean\n所有继承了 Object 的对象都会继承到 hasOwnProperty 方法。这个方法可以用来检测一个对象是否含有特定的自身属性；和 in 运算符不同，该方法会忽略掉那些从原型链上继承到的属性\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("isPrototypeOf()")]),s._v(" 方法用于测试一个对象是否存在于另一个对象的原型链上")]),s._v(" "),a("blockquote",[a("p",[s._v("​\t"),a("code",[s._v("isPrototypeOf()")]),s._v(" 与 "),a("code",[s._v("instanceof")]),s._v(' 运算符不同。在表达式 "'),a("code",[s._v("object instanceof AFunction")]),s._v('"中，'),a("code",[s._v("object")]),s._v(" 的原型链是针对 "),a("code",[s._v("AFunction.prototype")]),s._v(" 进行检查的，而不是针对 "),a("code",[s._v("AFunction")]),s._v(" 本身")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("prototypeObj.isPrototypeOf(object)\n\nobject\n在该对象的原型链上搜寻\n返回值\nBoolean\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("propertyIsEnumerable()")]),s._v(" 方法返回一个布尔值，表示指定的属性是否可枚举")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("obj.propertyIsEnumerable(prop)\n\nprop\n需要测试的属性名\n\n每个对象都有一个propertyIsEnumerable方法。此方法可以确定对象中指定的属性是否可以被for...in循环枚举，但是通过原型链继承的属性除外。如果对象没有指定的属性，则此方法返回false\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("toLocaleString()")]),s._v(" 方法返回一个该对象的字符串表示。此方法被用于派生对象为了特定语言环境的目的（locale-specific purposes）而重载使用")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("obj.toLocaleString()\n\nObject toLocaleString 返回调用 toString() 的结果。\n该函数提供给对象一个通用的toLocaleString 方法，不是全部都可以使用它。\n\nArray：Array.prototype.toLocaleString()\nNumber：Number.prototype.toLocaleString()\nDate：Date.prototype.toLocaleString()\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("toString()")]),s._v(" 方法返回一个表示该对象的字符串")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('object.toString()\n\n每个对象都有一个toString()方法，当该对象被表示为一个文本值时，或者一个对象以预期的字符串方式引用时自动调用。默认情况下，toString()方法被每个Object对象继承。如果此方法在自定义对象中未被覆盖，toString() 返回 "[object type]"，其中type是对象的类型\n\ntoString()调用 null返回[object Null]，undefined 返回[object Undefined]\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("valueOf()")]),s._v(" 方法返回指定对象的原始值")]),s._v(" "),a("div",{staticClass:"language-html line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[s._v("object.valueOf()\n\n不同类型对象的valueOf()方法的返回值\nArray\t返回数组对象本身。\nBoolean\t布尔值。\nDate\t存储的时间是从 1970 年 1 月 1 日午夜开始计的毫秒数 UTC。\nFunction\t函数本身。\nNumber\t数字值。\nObject\t对象本身。这是默认情况。\nString\t字符串值。\nMath 和 Error 对象没有 valueOf 方法。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("Object.seal()")]),s._v("方法封闭一个对象，阻止添加新属性并将所有现有属性标记为不可配置。当前属性的值只要可写就可以改变")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Object.seal(obj)\n\n通常，一个对象是可扩展的（可以添加新的属性）。密封一个对象会让这个对象变的不能添加新属性，且所有已有属性会变的不可配置。属性不可配置的效果就是属性变的不可删除，以及一个数据属性不能被重新定义成为访问器属性，或者反之。但属性的值仍然可以修改。尝试删除一个密封对象的属性或者将某个密封对象的属性从数据属性转换成访问器属性，结果会静默失败或抛出TypeError\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("Object.setPrototypeOf()")]),s._v(" 方法设置一个指定的对象的原型 ( 即, 内部[[Prototype]]属性）到另一个对象或  "),a("code",[s._v("null")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Object.setPrototypeOf(obj, prototype)\n\nobj\n要设置其原型的对象。.\nprototype\n该对象的新原型(一个对象 或 null).\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("Object.values()")]),s._v("方法返回一个给定对象自身的所有可枚举属性值的数组，值的顺序与使用"),a("code",[s._v("for...in")]),s._v("循环的顺序相同 ( 区别在于 for-in 循环枚举原型链中的属性 )")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Object.values(obj)\n\nObject.values()返回一个数组，其元素是在对象上找到的可枚举属性值。属性的顺序与通过手动循环对象的属性值所给出的顺序相同\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])])])])])}),[],!1,null,null,null);a.default=t.exports}}]);